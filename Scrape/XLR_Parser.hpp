/*
 * Written by Jason Moggridge 
 * Last eddited Wed May 27, 2015
 * Written for the xlr stats players page on the casual cruelty server
 *
 * when run will output the current number of players and the current map 
 * on the server.
 *
 * When run with any argument at all (literally anything) it will output 
 * the number of players, and the current map, plus a all of the currently
 * playing players names
 */

#include <stdio.h>
#include <string.h>
#include <curl/curl.h>
#include <libxml/parser.h>
#include <libxml/xpath.h>
#include <libxml/HTMLparser.h>

#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <sstream>
#include <algorithm>

class XLR_Parser
{
public:
	static bool failure;
	static std::string errorBuffer;
	const static std::string error_message;

	XLR_Parser()
	{
		failure = false;
		errorBuffer = "";
	}

	class player_info
	{
	public:
		 
		player_info(std::string name, bool regular): name{name}, regular{regular}, RSM_member(false) 
		{
		}

		std::string name;
		bool regular;
		bool RSM_member;
	};

	class UrT_stats
	{
	public:

		UrT_stats()
		{
			this->failure = false;
		}

		bool failure;
		std::string error_message;
		int player_count;
		std::vector<player_info> players;
		std::string map_name;
		std::time_t snapshot_time;
	};

	static UrT_stats parse_XLR_stats();

private:

	static void set_failure(std::string custom_message);

	static UrT_stats get_failure();

	/* get_player_names: Gets a list of all players currently in game. This disincludes players
	 * in spec, and includes bots sometimes (but not always, they are sometimes listed as being
	 * on different teams) from html document
	 *
	 * @param document_poitner	: A html document pointer to a copy of the server_players page on 
	 * xlr stats
	 * @return					: The list of players
	 */
	static std::vector<player_info> get_player_names(htmlDocPtr document_pointer);

	/*
	 * get_map_name: Gets the map name from the xlr stats page in memory
	 * xpath is used to go to the list of nodes it is in, then those nodes 
	 * are looped through looking for the proper label asscociated with map names, 
	 * the map name is a child of the asscociated label.
	 *
	 * @param document_pointer	: A pointer to the hmtl document stored in memory by libxml
	 * @return string			: The map name
	*/	
	static std::string get_map_name(htmlDocPtr document_pointer);

	/*
	 * get_document_pointer: creates a document pointer for the html page gotten by curl
	 *
	 * @param dataBuffer	: The html page gotten by curl in the form of a string
	 * @return htmlDocPtr	: The new document pointer
	 */
	static htmlDocPtr get_document_pointer(std::string dataBuffer);

	/*
	 * get_webpage: Gets the xlr stats page from the internet using curl
	 *
	 * @return: A sting containing the page's html
	 */
	static std::string get_webpage();

	/*
	 * write_data: callback function for the  curl write function option, puts the data gotten from 
	 * the internet into the databuffer that will eventually contain the entire html page
	 *
	 * See curl documentation for more info on the parameters and return of CURLOPT_WRITEFUNCTION
	 */
	static size_t write_data(char *data, size_t size, size_t nmemb, std::string &dataBuffer);
	
	/*
	 * initialize_curl: Initialize curl, this sets up all the variable necessary to call curl and get the webpage
	 * 
	 * @param conn			: Curl handle
	 * @param url			: the url of the webpage
	 * @param dataBuffer	: buffer to store webpage in, is what is eventually returned to the user
	 * @param errorBuffer	: buffer to store errors generated by curl;
	 *
	 * @return				: True if the initialization was successful, false if not
	 */
	static void initialize_curl(CURL *&conn, const std::string& url, std::string &dataBuffer);

	/*
	 * get_xpath_nodes: Get all nodes that match an XPath path
	 *
	 * @param document_pointer	: Pointer to the html document
	 * @param xpath_expression	: the XPath expression to evaluate
	 * @param new_root			: set a new document root from which to search, optional
	 *
	 * @return xmlXPathObjectPtr: Pointer containing the xpath results
	 */
	static xmlXPathObjectPtr get_xpath_nodes(xmlDocPtr document_pointer, const std::string& xpath_expression, xmlNode * new_root = NULL);
	
	/*
	 * get_next_tag: get the next html tag sibling matching a certain tag name.
	 * A bit of a misnomer. Useful only when passing in a children element of another 
	 * tag. Needed because of random "text" elements in the html.
	 *
	 * @param current_tag	: A ->children object from some other tag
	 * @param tag_name		: The name of the tag that you would like to find
	 *
	 * @return xmlNode*		: The first node matching the tag name that was found
	 *						: returns NULL if none were found
	 */
	static xmlNode* get_next_tag(xmlNode*& current_tag, const std::string& tag_name);
};


